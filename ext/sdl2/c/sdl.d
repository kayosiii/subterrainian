module sdl2.c.sdl;

import sdl2.c.types;

import core.stdc.config;
import core.stdc.stdarg: va_list;
static import core.simd;
static import std.conv;

struct Int128 { long lower; long upper; }
struct UInt128 { ulong lower; ulong upper; }

struct __locale_data { int dummy; }



alias _Bool = bool;
struct dpp {
    static struct Opaque(int N) {
        void[N] bytes;
    }

    static bool isEmpty(T)() {
        return T.tupleof.length == 0;
    }
    static struct Move(T) {
        T* ptr;
    }


    static auto move(T)(ref T value) {
        return Move!T(&value);
    }
    mixin template EnumD(string name, T, string prefix) if(is(T == enum)) {
        private static string _memberMixinStr(string member) {
            import std.conv: text;
            import std.array: replace;
            return text(` `, member.replace(prefix, ""), ` = `, T.stringof, `.`, member, `,`);
        }
        private static string _enumMixinStr() {
            import std.array: join;
            string[] ret;
            ret ~= "enum " ~ name ~ "{";
            static foreach(member; __traits(allMembers, T)) {
                ret ~= _memberMixinStr(member);
            }
            ret ~= "}";
            return ret.join("\n");
        }
        mixin(_enumMixinStr());
    }
}

extern(C)
{
    int SDL_Init(uint) @nogc nothrow @trusted;
    int SDL_InitSubSystem(uint) @nogc nothrow @trusted;
    void SDL_QuitSubSystem(uint) @nogc nothrow @trusted;
    uint SDL_WasInit(uint) @nogc nothrow @trusted;
    void SDL_Quit() @nogc nothrow @trusted;

    SDL_AssertState SDL_ReportAssertion(SDL_AssertData*, const(char)*, const(char)*, int) @nogc nothrow;
    void SDL_SetAssertionHandler(SDL_AssertState function(const(SDL_AssertData)*, void*), void*) @nogc nothrow;
    SDL_AssertState function(const(SDL_AssertData)*, void*) SDL_GetDefaultAssertionHandler() @nogc nothrow;
    SDL_AssertState function(const(SDL_AssertData)*, void*) SDL_GetAssertionHandler(void**) @nogc nothrow;
    const(SDL_AssertData)* SDL_GetAssertionReport() @nogc nothrow;
    void SDL_ResetAssertionReport() @nogc nothrow;
    
    SDL_bool SDL_AtomicTryLock(int*) @nogc nothrow;
    void SDL_AtomicLock(int*) @nogc nothrow;
    void SDL_AtomicUnlock(int*) @nogc nothrow;
    void SDL_MemoryBarrierReleaseFunction() @nogc nothrow;
    void SDL_MemoryBarrierAcquireFunction() @nogc nothrow;
    SDL_bool SDL_AtomicCAS(SDL_atomic_t*, int, int) @nogc nothrow;
    int SDL_AtomicSet(SDL_atomic_t*, int) @nogc nothrow;
    int SDL_AtomicGet(SDL_atomic_t*) @nogc nothrow;
    int SDL_AtomicAdd(SDL_atomic_t*, int) @nogc nothrow;
    SDL_bool SDL_AtomicCASPtr(void**, void*, void*) @nogc nothrow;
    void* SDL_AtomicSetPtr(void**, void*) @nogc nothrow;
    void* SDL_AtomicGetPtr(void**) @nogc nothrow;

    int SDL_GetNumAudioDrivers() @nogc nothrow;
    const(char)* SDL_GetAudioDriver(int) @nogc nothrow;
    int SDL_AudioInit(const(char)*) @nogc nothrow;
    void SDL_AudioQuit() @nogc nothrow;
    const(char)* SDL_GetCurrentAudioDriver() @nogc nothrow;
    int SDL_OpenAudio(SDL_AudioSpec*, SDL_AudioSpec*) @nogc nothrow;
    int SDL_GetNumAudioDevices(int) @nogc nothrow;
    const(char)* SDL_GetAudioDeviceName(int, int) @nogc nothrow;
    uint SDL_OpenAudioDevice(const(char)*, int, const(SDL_AudioSpec)*, SDL_AudioSpec*, int) @nogc nothrow;
    SDL_AudioStatus SDL_GetAudioStatus() @nogc nothrow;
    SDL_AudioStatus SDL_GetAudioDeviceStatus(uint) @nogc nothrow;
    void SDL_PauseAudio(int) @nogc nothrow;
    void SDL_PauseAudioDevice(uint, int) @nogc nothrow;
    SDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops*, int, SDL_AudioSpec*, ubyte**, uint*) @nogc nothrow;
    void SDL_FreeWAV(ubyte*) @nogc nothrow;
    int SDL_BuildAudioCVT(SDL_AudioCVT*, ushort, ubyte, int, ushort, ubyte, int) @nogc nothrow;
    int SDL_ConvertAudio(SDL_AudioCVT*) @nogc nothrow;
    _SDL_AudioStream* SDL_NewAudioStream(const(ushort), const(ubyte), const(int), const(ushort), const(ubyte), const(int)) @nogc nothrow;
    int SDL_AudioStreamPut(_SDL_AudioStream*, const(void)*, int) @nogc nothrow;
    int SDL_AudioStreamGet(_SDL_AudioStream*, void*, int) @nogc nothrow;
    int SDL_AudioStreamAvailable(_SDL_AudioStream*) @nogc nothrow;
    int SDL_AudioStreamFlush(_SDL_AudioStream*) @nogc nothrow;
    void SDL_AudioStreamClear(_SDL_AudioStream*) @nogc nothrow;
    void SDL_FreeAudioStream(_SDL_AudioStream*) @nogc nothrow;
    void SDL_MixAudio(ubyte*, const(ubyte)*, uint, int) @nogc nothrow;
    void SDL_MixAudioFormat(ubyte*, const(ubyte)*, ushort, uint, int) @nogc nothrow;
    int SDL_QueueAudio(uint, const(void)*, uint) @nogc nothrow;
    uint SDL_DequeueAudio(uint, void*, uint) @nogc nothrow;
    uint SDL_GetQueuedAudioSize(uint) @nogc nothrow;
    void SDL_ClearQueuedAudio(uint) @nogc nothrow;
    void SDL_LockAudio() @nogc nothrow;
    void SDL_LockAudioDevice(uint) @nogc nothrow;
    void SDL_UnlockAudio() @nogc nothrow;
    void SDL_UnlockAudioDevice(uint) @nogc nothrow;
    void SDL_CloseAudio() @nogc nothrow;
    void SDL_CloseAudioDevice(uint) @nogc nothrow;

    SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor, SDL_BlendFactor, SDL_BlendOperation, SDL_BlendFactor, SDL_BlendFactor, SDL_BlendOperation) @nogc nothrow;
    int SDL_SetClipboardText(const(char)*) @nogc nothrow;
    char* SDL_GetClipboardText() @nogc nothrow;
    SDL_bool SDL_HasClipboardText() @nogc nothrow;
    
    int SDL_GetCPUCount() @nogc nothrow;
    int SDL_GetCPUCacheLineSize() @nogc nothrow;
    SDL_bool SDL_HasRDTSC() @nogc nothrow;
    SDL_bool SDL_HasAltiVec() @nogc nothrow;
    SDL_bool SDL_HasMMX() @nogc nothrow;
    SDL_bool SDL_Has3DNow() @nogc nothrow;
    SDL_bool SDL_HasSSE() @nogc nothrow;
    SDL_bool SDL_HasSSE2() @nogc nothrow;
    SDL_bool SDL_HasSSE3() @nogc nothrow;
    SDL_bool SDL_HasSSE41() @nogc nothrow;
    SDL_bool SDL_HasSSE42() @nogc nothrow;
    SDL_bool SDL_HasAVX() @nogc nothrow;
    SDL_bool SDL_HasAVX2() @nogc nothrow;
    SDL_bool SDL_HasAVX512F() @nogc nothrow;
    SDL_bool SDL_HasNEON() @nogc nothrow;
    int SDL_GetSystemRAM() @nogc nothrow;

    c_ulong SDL_SIMDGetAlignment() @nogc nothrow;
    void* SDL_SIMDAlloc(const(c_ulong)) @nogc nothrow;
    void SDL_SIMDFree(void*) @nogc nothrow;
    // static ushort SDL_Swap16(ushort) @nogc nothrow;
    // static uint SDL_Swap32(uint) @nogc nothrow;
    // static c_ulong SDL_Swap64(c_ulong) @nogc nothrow;
    // static float SDL_SwapFloat(float) @nogc nothrow;

    int SDL_SetError(const(char)*, ...) @nogc nothrow;
    const(char)* SDL_GetError() @nogc nothrow;
    void SDL_ClearError() @nogc nothrow;
    int SDL_Error(SDL_errorcode) @nogc nothrow;
    
    void SDL_PumpEvents() @nogc nothrow;
    int SDL_PeepEvents(SDL_Event*, int, SDL_eventaction, uint, uint) @nogc nothrow;
    SDL_bool SDL_HasEvent(uint) @nogc nothrow;
    SDL_bool SDL_HasEvents(uint, uint) @nogc nothrow;
    void SDL_FlushEvent(uint) @nogc nothrow;
    void SDL_FlushEvents(uint, uint) @nogc nothrow;
    int SDL_PollEvent(SDL_Event*) @nogc nothrow;
    int SDL_WaitEvent(SDL_Event*) @nogc nothrow;
    int SDL_WaitEventTimeout(SDL_Event*, int) @nogc nothrow;
    int SDL_PushEvent(SDL_Event*) @nogc nothrow;
    alias SDL_EventFilter = int function(void*, SDL_Event*);
    void SDL_SetEventFilter(int function(void*, SDL_Event*), void*) @nogc nothrow;
    SDL_bool SDL_GetEventFilter(int function(void*, SDL_Event*)*, void**) @nogc nothrow;
    void SDL_AddEventWatch(int function(void*, SDL_Event*), void*) @nogc nothrow;
    void SDL_DelEventWatch(int function(void*, SDL_Event*), void*) @nogc nothrow;
    void SDL_FilterEvents(int function(void*, SDL_Event*), void*) @nogc nothrow;
    char* SDL_GetBasePath() @nogc nothrow;
    char* SDL_GetPrefPath(const(char)*, const(char)*) @nogc nothrow;
    
    int SDL_GameControllerAddMappingsFromRW(SDL_RWops*, int) @nogc nothrow;
    static void _mm_monitor(const(void)*, uint, uint) @nogc nothrow;
    int SDL_GameControllerAddMapping(const(char)*) @nogc nothrow;
    int SDL_GameControllerNumMappings() @nogc nothrow;
    char* SDL_GameControllerMappingForIndex(int) @nogc nothrow;
    char* SDL_GameControllerMappingForGUID(SDL_JoystickGUID) @nogc nothrow;
    char* SDL_GameControllerMapping(_SDL_GameController*) @nogc nothrow;
    SDL_bool SDL_IsGameController(int) @nogc nothrow;
    const(char)* SDL_GameControllerNameForIndex(int) @nogc nothrow;
    char* SDL_GameControllerMappingForDeviceIndex(int) @nogc nothrow;
    _SDL_GameController* SDL_GameControllerOpen(int) @nogc nothrow;
    _SDL_GameController* SDL_GameControllerFromInstanceID(int) @nogc nothrow;
    const(char)* SDL_GameControllerName(_SDL_GameController*) @nogc nothrow;
    int SDL_GameControllerGetPlayerIndex(_SDL_GameController*) @nogc nothrow;
    ushort SDL_GameControllerGetVendor(_SDL_GameController*) @nogc nothrow;
    ushort SDL_GameControllerGetProduct(_SDL_GameController*) @nogc nothrow;
    ushort SDL_GameControllerGetProductVersion(_SDL_GameController*) @nogc nothrow;
    SDL_bool SDL_GameControllerGetAttached(_SDL_GameController*) @nogc nothrow;
    _SDL_Joystick* SDL_GameControllerGetJoystick(_SDL_GameController*) @nogc nothrow;
    int SDL_GameControllerEventState(int) @nogc nothrow;
    void SDL_GameControllerUpdate() @nogc nothrow;
    
    SDL_GameControllerAxis SDL_GameControllerGetAxisFromString(const(char)*) @nogc nothrow;
    const(char)* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis) @nogc nothrow;
    SDL_GameControllerButtonBind SDL_GameControllerGetBindForAxis(_SDL_GameController*, SDL_GameControllerAxis) @nogc nothrow;
    short SDL_GameControllerGetAxis(_SDL_GameController*, SDL_GameControllerAxis) @nogc nothrow;
    
    SDL_GameControllerButton SDL_GameControllerGetButtonFromString(const(char)*) @nogc nothrow;
    const(char)* SDL_GameControllerGetStringForButton(SDL_GameControllerButton) @nogc nothrow;
    SDL_GameControllerButtonBind SDL_GameControllerGetBindForButton(_SDL_GameController*, SDL_GameControllerButton) @nogc nothrow;
    ubyte SDL_GameControllerGetButton(_SDL_GameController*, SDL_GameControllerButton) @nogc nothrow;
    int SDL_GameControllerRumble(_SDL_GameController*, ushort, ushort, uint) @nogc nothrow;
    void SDL_GameControllerClose(_SDL_GameController*) @nogc nothrow;
    int SDL_RecordGesture(c_long) @nogc nothrow;
    int SDL_SaveAllDollarTemplates(SDL_RWops*) @nogc nothrow;
    int SDL_SaveDollarTemplate(c_long, SDL_RWops*) @nogc nothrow;
    int SDL_LoadDollarTemplates(c_long, SDL_RWops*) @nogc nothrow;
    static core.simd.double2 _mm_movedup_pd(core.simd.double2) @nogc nothrow;
    
    int SDL_NumHaptics() @nogc nothrow;
    const(char)* SDL_HapticName(int) @nogc nothrow;
    _SDL_Haptic* SDL_HapticOpen(int) @nogc nothrow;
    int SDL_HapticOpened(int) @nogc nothrow;
    int SDL_HapticIndex(_SDL_Haptic*) @nogc nothrow;
    int SDL_MouseIsHaptic() @nogc nothrow;
    _SDL_Haptic* SDL_HapticOpenFromMouse() @nogc nothrow;
    int SDL_JoystickIsHaptic(_SDL_Joystick*) @nogc nothrow;
    _SDL_Haptic* SDL_HapticOpenFromJoystick(_SDL_Joystick*) @nogc nothrow;
    void SDL_HapticClose(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticNumEffects(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticNumEffectsPlaying(_SDL_Haptic*) @nogc nothrow;
    uint SDL_HapticQuery(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticNumAxes(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticEffectSupported(_SDL_Haptic*, SDL_HapticEffect*) @nogc nothrow;
    int SDL_HapticNewEffect(_SDL_Haptic*, SDL_HapticEffect*) @nogc nothrow;
    int SDL_HapticUpdateEffect(_SDL_Haptic*, int, SDL_HapticEffect*) @nogc nothrow;
    int SDL_HapticRunEffect(_SDL_Haptic*, int, uint) @nogc nothrow;
    int SDL_HapticStopEffect(_SDL_Haptic*, int) @nogc nothrow;
    void SDL_HapticDestroyEffect(_SDL_Haptic*, int) @nogc nothrow;
    int SDL_HapticGetEffectStatus(_SDL_Haptic*, int) @nogc nothrow;
    int SDL_HapticSetGain(_SDL_Haptic*, int) @nogc nothrow;
    int SDL_HapticSetAutocenter(_SDL_Haptic*, int) @nogc nothrow;
    int SDL_HapticPause(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticUnpause(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticStopAll(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticRumbleSupported(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticRumbleInit(_SDL_Haptic*) @nogc nothrow;
    int SDL_HapticRumblePlay(_SDL_Haptic*, float, uint) @nogc nothrow;
    int SDL_HapticRumbleStop(_SDL_Haptic*) @nogc nothrow;

    SDL_bool SDL_SetHintWithPriority(const(char)*, const(char)*, SDL_HintPriority) @nogc nothrow;
    SDL_bool SDL_SetHint(const(char)*, const(char)*) @nogc nothrow;
    const(char)* SDL_GetHint(const(char)*) @nogc nothrow;
    SDL_bool SDL_GetHintBoolean(const(char)*, SDL_bool) @nogc nothrow;
    alias SDL_HintCallback = void function(void*, const(char)*, const(char)*, const(char)*);
    void SDL_AddHintCallback(const(char)*, void function(void*, const(char)*, const(char)*, const(char)*), void*) @nogc nothrow;
    void SDL_DelHintCallback(const(char)*, void function(void*, const(char)*, const(char)*, const(char)*), void*) @nogc nothrow;
    void SDL_ClearHints() @nogc nothrow;
    static int _mm_sll_pi16(int , int ) @nogc nothrow;
   
    void SDL_LockJoysticks() @nogc nothrow;
    void SDL_UnlockJoysticks() @nogc nothrow;
    int SDL_NumJoysticks() @nogc nothrow;
    const(char)* SDL_JoystickNameForIndex(int) @nogc nothrow;
    int SDL_JoystickGetDevicePlayerIndex(int) @nogc nothrow;
    SDL_JoystickGUID SDL_JoystickGetDeviceGUID(int) @nogc nothrow;
    ushort SDL_JoystickGetDeviceVendor(int) @nogc nothrow;
    ushort SDL_JoystickGetDeviceProduct(int) @nogc nothrow;
    ushort SDL_JoystickGetDeviceProductVersion(int) @nogc nothrow;
    SDL_JoystickType SDL_JoystickGetDeviceType(int) @nogc nothrow;
    int SDL_JoystickGetDeviceInstanceID(int) @nogc nothrow;
    _SDL_Joystick* SDL_JoystickOpen(int) @nogc nothrow;
    _SDL_Joystick* SDL_JoystickFromInstanceID(int) @nogc nothrow;
    const(char)* SDL_JoystickName(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickGetPlayerIndex(_SDL_Joystick*) @nogc nothrow;
    SDL_JoystickGUID SDL_JoystickGetGUID(_SDL_Joystick*) @nogc nothrow;
    ushort SDL_JoystickGetVendor(_SDL_Joystick*) @nogc nothrow;
    ushort SDL_JoystickGetProduct(_SDL_Joystick*) @nogc nothrow;
    ushort SDL_JoystickGetProductVersion(_SDL_Joystick*) @nogc nothrow;
    SDL_JoystickType SDL_JoystickGetType(_SDL_Joystick*) @nogc nothrow;
    void SDL_JoystickGetGUIDString(SDL_JoystickGUID, char*, int) @nogc nothrow;
    SDL_JoystickGUID SDL_JoystickGetGUIDFromString(const(char)*) @nogc nothrow;
    SDL_bool SDL_JoystickGetAttached(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickInstanceID(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickNumAxes(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickNumBalls(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickNumHats(_SDL_Joystick*) @nogc nothrow;
    int SDL_JoystickNumButtons(_SDL_Joystick*) @nogc nothrow;
    void SDL_JoystickUpdate() @nogc nothrow;
    int SDL_JoystickEventState(int) @nogc nothrow;
    static int _mm_mullo_pi16(int , int ) @nogc nothrow;
    short SDL_JoystickGetAxis(_SDL_Joystick*, int) @nogc nothrow;
    SDL_bool SDL_JoystickGetAxisInitialState(_SDL_Joystick*, int, short*) @nogc nothrow;
    static int _mm_mulhi_pi16(int , int ) @nogc nothrow;
    static int _mm_madd_pi16(int , int ) @nogc nothrow;
    static int _mm_subs_pu16(int , int ) @nogc nothrow;
    static int _mm_subs_pu8(int , int ) @nogc nothrow;
    ubyte SDL_JoystickGetHat(_SDL_Joystick*, int) @nogc nothrow;
    int SDL_JoystickGetBall(_SDL_Joystick*, int, int*, int*) @nogc nothrow;
    ubyte SDL_JoystickGetButton(_SDL_Joystick*, int) @nogc nothrow;
    int SDL_JoystickRumble(_SDL_Joystick*, ushort, ushort, uint) @nogc nothrow;
    void SDL_JoystickClose(_SDL_Joystick*) @nogc nothrow;
    SDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(_SDL_Joystick*) @nogc nothrow;
    static int _mm_subs_pi16(int , int ) @nogc nothrow;
    
    SDL_Window* SDL_GetKeyboardFocus() @nogc nothrow;
    const(ubyte)* SDL_GetKeyboardState(int*) @nogc nothrow;
    SDL_Keymod SDL_GetModState() @nogc nothrow;
    void SDL_SetModState(SDL_Keymod) @nogc nothrow;
    int SDL_GetKeyFromScancode(SDL_Scancode) @nogc nothrow;
    SDL_Scancode SDL_GetScancodeFromKey(int) @nogc nothrow;
    const(char)* SDL_GetScancodeName(SDL_Scancode) @nogc nothrow;
    SDL_Scancode SDL_GetScancodeFromName(const(char)*) @nogc nothrow;
    const(char)* SDL_GetKeyName(int) @nogc nothrow;
    int SDL_GetKeyFromName(const(char)*) @nogc nothrow;
    void SDL_StartTextInput() @nogc nothrow;
    SDL_bool SDL_IsTextInputActive() @nogc nothrow;
    void SDL_StopTextInput() @nogc nothrow;
    void SDL_SetTextInputRect(SDL_Rect*) @nogc nothrow;
    SDL_bool SDL_HasScreenKeyboardSupport() @nogc nothrow;
    SDL_bool SDL_IsScreenKeyboardShown(SDL_Window*) @nogc nothrow;
    static int _mm_subs_pi8(int , int ) @nogc nothrow;
    
    void* SDL_LoadObject(const(char)*) @nogc nothrow;
    void* SDL_LoadFunction(void*, const(char)*) @nogc nothrow;
    void SDL_UnloadObject(void*) @nogc nothrow;
    static int _mm_adds_pu16(int , int ) @nogc nothrow;
    
    void SDL_LogSetAllPriority(SDL_LogPriority) @nogc nothrow;
    void SDL_LogSetPriority(int, SDL_LogPriority) @nogc nothrow;
    SDL_LogPriority SDL_LogGetPriority(int) @nogc nothrow;
    void SDL_LogResetPriorities() @nogc nothrow;
    void SDL_Log(const(char)*, ...) @nogc nothrow;
    void SDL_LogVerbose(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogDebug(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogInfo(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogWarn(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogError(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogCritical(int, const(char)*, ...) @nogc nothrow;
    void SDL_LogMessage(int, SDL_LogPriority, const(char)*, ...) @nogc nothrow;
    void SDL_LogMessageV(int, SDL_LogPriority, const(char)*, va_list*) @nogc nothrow;
    alias SDL_LogOutputFunction = void function(void*, int, SDL_LogPriority, const(char)*);
    void SDL_LogGetOutputFunction(void function(void*, int, SDL_LogPriority, const(char)*)*, void**) @nogc nothrow;
    void SDL_LogSetOutputFunction(void function(void*, int, SDL_LogPriority, const(char)*), void*) @nogc nothrow;
    static int _mm_adds_pu8(int , int ) @nogc nothrow;
    alias SDL_main_func = int function(int, char**);
    int SDL_main(int, char**) @nogc nothrow;
    void SDL_SetMainReady() @nogc nothrow;

    int SDL_ShowMessageBox(const(SDL_MessageBoxData)*, int*) @nogc nothrow;
    int SDL_ShowSimpleMessageBox(uint, const(char)*, const(char)*, SDL_Window*) @nogc nothrow;
    static int _mm_adds_pi16(int , int ) @nogc nothrow;
    
    SDL_Window* SDL_GetMouseFocus() @nogc nothrow;
    uint SDL_GetMouseState(int*, int*) @nogc nothrow;
    uint SDL_GetGlobalMouseState(int*, int*) @nogc nothrow;
    uint SDL_GetRelativeMouseState(int*, int*) @nogc nothrow;
    void SDL_WarpMouseInWindow(SDL_Window*, int, int) @nogc nothrow;
    int SDL_WarpMouseGlobal(int, int) @nogc nothrow;
    int SDL_SetRelativeMouseMode(SDL_bool) @nogc nothrow;
    int SDL_CaptureMouse(SDL_bool) @nogc nothrow;
    SDL_bool SDL_GetRelativeMouseMode() @nogc nothrow;
    SDL_Cursor* SDL_CreateCursor(const(ubyte)*, const(ubyte)*, int, int, int, int) @nogc nothrow;
    SDL_Cursor* SDL_CreateColorCursor(SDL_Surface*, int, int) @nogc nothrow;
    SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor) @nogc nothrow;
    void SDL_SetCursor(SDL_Cursor*) @nogc nothrow;
    SDL_Cursor* SDL_GetCursor() @nogc nothrow;
    SDL_Cursor* SDL_GetDefaultCursor() @nogc nothrow;
    void SDL_FreeCursor(SDL_Cursor*) @nogc nothrow;
    int SDL_ShowCursor(int) @nogc nothrow;
    static int _mm_adds_pi8(int , int ) @nogc nothrow;
    static int _mm_add_pi32(int , int ) @nogc nothrow;
    static int _mm_add_pi16(int , int ) @nogc nothrow;
    static int _mm_add_pi8(int , int ) @nogc nothrow;
    static int _mm_unpacklo_pi32(int , int ) @nogc nothrow;
    static int _mm_unpacklo_pi16(int , int ) @nogc nothrow;
    static int _mm_unpacklo_pi8(int , int ) @nogc nothrow;
    SDL_mutex* SDL_CreateMutex() @nogc nothrow;
    int SDL_LockMutex(SDL_mutex*) @nogc nothrow;
    int SDL_TryLockMutex(SDL_mutex*) @nogc nothrow;
    static int _mm_unpackhi_pi32(int , int ) @nogc nothrow;
    int SDL_UnlockMutex(SDL_mutex*) @nogc nothrow;
    void SDL_DestroyMutex(SDL_mutex*) @nogc nothrow;
 
    SDL_semaphore* SDL_CreateSemaphore(uint) @nogc nothrow;
    void SDL_DestroySemaphore(SDL_semaphore*) @nogc nothrow;
    int SDL_SemWait(SDL_semaphore*) @nogc nothrow;
    int SDL_SemTryWait(SDL_semaphore*) @nogc nothrow;
    int SDL_SemWaitTimeout(SDL_semaphore*, uint) @nogc nothrow;
    int SDL_SemPost(SDL_semaphore*) @nogc nothrow;
    uint SDL_SemValue(SDL_semaphore*) @nogc nothrow;
    
    SDL_cond* SDL_CreateCond() @nogc nothrow;
    void SDL_DestroyCond(SDL_cond*) @nogc nothrow;
    int SDL_CondSignal(SDL_cond*) @nogc nothrow;
    int SDL_CondBroadcast(SDL_cond*) @nogc nothrow;
    int SDL_CondWait(SDL_cond*, SDL_mutex*) @nogc nothrow;
    int SDL_CondWaitTimeout(SDL_cond*, SDL_mutex*, uint) @nogc nothrow;
    static int _mm_unpackhi_pi16(int , int ) @nogc nothrow;
    
    static int _mm_unpackhi_pi8(int , int ) @nogc nothrow;
    static int _mm_packs_pu16(int , int ) @nogc nothrow;
    static int _mm_packs_pi32(int , int ) @nogc nothrow;
    static int _mm_packs_pi16(int , int ) @nogc nothrow;
    static long _mm_cvtm64_si64(int ) @nogc nothrow;
    static int _mm_cvtsi64_m64(long) @nogc nothrow;
    static int _mm_cvtsi64_si32(int ) @nogc nothrow;
    
    const(char)* SDL_GetPixelFormatName(uint) @nogc nothrow;
    SDL_bool SDL_PixelFormatEnumToMasks(uint, int*, uint*, uint*, uint*, uint*) @nogc nothrow;
    uint SDL_MasksToPixelFormatEnum(int, uint, uint, uint, uint) @nogc nothrow;
    SDL_PixelFormat* SDL_AllocFormat(uint) @nogc nothrow;
    void SDL_FreeFormat(SDL_PixelFormat*) @nogc nothrow;
    SDL_Palette* SDL_AllocPalette(int) @nogc nothrow;
    int SDL_SetPixelFormatPalette(SDL_PixelFormat*, SDL_Palette*) @nogc nothrow;
    int SDL_SetPaletteColors(SDL_Palette*, const(SDL_Color)*, int, int) @nogc nothrow;
    void SDL_FreePalette(SDL_Palette*) @nogc nothrow;
    uint SDL_MapRGB(const(SDL_PixelFormat)*, ubyte, ubyte, ubyte) @nogc nothrow;
    uint SDL_MapRGBA(const(SDL_PixelFormat)*, ubyte, ubyte, ubyte, ubyte) @nogc nothrow;
    void SDL_GetRGB(uint, const(SDL_PixelFormat)*, ubyte*, ubyte*, ubyte*) @nogc nothrow;
    void SDL_GetRGBA(uint, const(SDL_PixelFormat)*, ubyte*, ubyte*, ubyte*, ubyte*) @nogc nothrow;
    void SDL_CalculateGammaRamp(float, ushort*) @nogc nothrow;
    static int _mm_cvtsi32_si64(int) @nogc nothrow;
    static void _mm_empty() @nogc nothrow;
    const(char)* SDL_GetPlatform() @nogc nothrow;
    
    SDL_PowerState SDL_GetPowerInfo(int*, int*) @nogc nothrow;
    
    static SDL_bool SDL_PointInRect(const(SDL_Point)*, const(SDL_Rect)*) @nogc nothrow;
    static SDL_bool SDL_RectEmpty(const(SDL_Rect)*) @nogc nothrow;
    static SDL_bool SDL_RectEquals(const(SDL_Rect)*, const(SDL_Rect)*) @nogc nothrow;
    SDL_bool SDL_HasIntersection(const(SDL_Rect)*, const(SDL_Rect)*) @nogc nothrow;
    SDL_bool SDL_IntersectRect(const(SDL_Rect)*, const(SDL_Rect)*, SDL_Rect*) @nogc nothrow;
    void SDL_UnionRect(const(SDL_Rect)*, const(SDL_Rect)*, SDL_Rect*) @nogc nothrow;
    SDL_bool SDL_EnclosePoints(const(SDL_Point)*, int, const(SDL_Rect)*, SDL_Rect*) @nogc nothrow;
    SDL_bool SDL_IntersectRectAndLine(const(SDL_Rect)*, int*, int*, int*, int*) @nogc nothrow;
    
    int SDL_GetNumRenderDrivers() @nogc nothrow;
    int SDL_GetRenderDriverInfo(int, SDL_RendererInfo*) @nogc nothrow;
    int SDL_CreateWindowAndRenderer(int, int, uint, SDL_Window**, SDL_Renderer**) @nogc nothrow;
    SDL_Renderer* SDL_CreateRenderer(SDL_Window*, int, uint) @nogc nothrow;
    SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface*) @nogc nothrow;
    SDL_Renderer* SDL_GetRenderer(SDL_Window*) @nogc nothrow;
    int SDL_GetRendererInfo(SDL_Renderer*, SDL_RendererInfo*) @nogc nothrow;
    int SDL_GetRendererOutputSize(SDL_Renderer*, int*, int*) @nogc nothrow;
    SDL_Texture* SDL_CreateTexture(SDL_Renderer*, uint, int, int, int) @nogc nothrow;
    SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer*, SDL_Surface*) @nogc nothrow;
    int SDL_QueryTexture(SDL_Texture*, uint*, int*, int*, int*) @nogc nothrow;
    int SDL_SetTextureColorMod(SDL_Texture*, ubyte, ubyte, ubyte) @nogc nothrow;
    int SDL_GetTextureColorMod(SDL_Texture*, ubyte*, ubyte*, ubyte*) @nogc nothrow;
    int SDL_SetTextureAlphaMod(SDL_Texture*, ubyte) @nogc nothrow;
    int SDL_GetTextureAlphaMod(SDL_Texture*, ubyte*) @nogc nothrow;
    int SDL_SetTextureBlendMode(SDL_Texture*, SDL_BlendMode) @nogc nothrow;
    int SDL_GetTextureBlendMode(SDL_Texture*, SDL_BlendMode*) @nogc nothrow;
    int SDL_UpdateTexture(SDL_Texture*, const(SDL_Rect)*, const(void)*, int) @nogc nothrow;
    int SDL_UpdateYUVTexture(SDL_Texture*, const(SDL_Rect)*, const(ubyte)*, int, const(ubyte)*, int, const(ubyte)*, int) @nogc nothrow;
    int SDL_LockTexture(SDL_Texture*, const(SDL_Rect)*, void**, int*) @nogc nothrow;
    void SDL_UnlockTexture(SDL_Texture*) @nogc nothrow;
    SDL_bool SDL_RenderTargetSupported(SDL_Renderer*) @nogc nothrow;
    int SDL_SetRenderTarget(SDL_Renderer*, SDL_Texture*) @nogc nothrow;
    SDL_Texture* SDL_GetRenderTarget(SDL_Renderer*) @nogc nothrow;
    int SDL_RenderSetLogicalSize(SDL_Renderer*, int, int) @nogc nothrow;
    void SDL_RenderGetLogicalSize(SDL_Renderer*, int*, int*) @nogc nothrow;
    int SDL_RenderSetIntegerScale(SDL_Renderer*, SDL_bool) @nogc nothrow;
    SDL_bool SDL_RenderGetIntegerScale(SDL_Renderer*) @nogc nothrow;
    int SDL_RenderSetViewport(SDL_Renderer*, const(SDL_Rect)*) @nogc nothrow;
    void SDL_RenderGetViewport(SDL_Renderer*, SDL_Rect*) @nogc nothrow;
    int SDL_RenderSetClipRect(SDL_Renderer*, const(SDL_Rect)*) @nogc nothrow;
    void SDL_RenderGetClipRect(SDL_Renderer*, SDL_Rect*) @nogc nothrow;
    SDL_bool SDL_RenderIsClipEnabled(SDL_Renderer*) @nogc nothrow;
    int SDL_RenderSetScale(SDL_Renderer*, float, float) @nogc nothrow;
    void SDL_RenderGetScale(SDL_Renderer*, float*, float*) @nogc nothrow;
    int SDL_SetRenderDrawColor(SDL_Renderer*, ubyte, ubyte, ubyte, ubyte) @nogc nothrow;
    int SDL_GetRenderDrawColor(SDL_Renderer*, ubyte*, ubyte*, ubyte*, ubyte*) @nogc nothrow;
    int SDL_SetRenderDrawBlendMode(SDL_Renderer*, SDL_BlendMode) @nogc nothrow;
    int SDL_GetRenderDrawBlendMode(SDL_Renderer*, SDL_BlendMode*) @nogc nothrow;
    int SDL_RenderClear(SDL_Renderer*) @nogc nothrow;
    int SDL_RenderDrawPoint(SDL_Renderer*, int, int) @nogc nothrow;
    int SDL_RenderDrawPoints(SDL_Renderer*, const(SDL_Point)*, int) @nogc nothrow;
    int SDL_RenderDrawLine(SDL_Renderer*, int, int, int, int) @nogc nothrow;
    int SDL_RenderDrawLines(SDL_Renderer*, const(SDL_Point)*, int) @nogc nothrow;
    int SDL_RenderDrawRect(SDL_Renderer*, const(SDL_Rect)*) @nogc nothrow;
    int SDL_RenderDrawRects(SDL_Renderer*, const(SDL_Rect)*, int) @nogc nothrow;
    int SDL_RenderFillRect(SDL_Renderer*, const(SDL_Rect)*) @nogc nothrow;
    int SDL_RenderFillRects(SDL_Renderer*, const(SDL_Rect)*, int) @nogc nothrow;
    int SDL_RenderCopy(SDL_Renderer*, SDL_Texture*, const(SDL_Rect)*, const(SDL_Rect)*) @nogc nothrow;
    int SDL_RenderCopyEx(SDL_Renderer*, SDL_Texture*, const(SDL_Rect)*, const(SDL_Rect)*, const(double), const(SDL_Point)*, const(SDL_RendererFlip)) @nogc nothrow;
    int SDL_RenderDrawPointF(SDL_Renderer*, float, float) @nogc nothrow;
    int SDL_RenderDrawPointsF(SDL_Renderer*, const(SDL_FPoint)*, int) @nogc nothrow;
    int SDL_RenderDrawLineF(SDL_Renderer*, float, float, float, float) @nogc nothrow;
    int SDL_RenderDrawLinesF(SDL_Renderer*, const(SDL_FPoint)*, int) @nogc nothrow;
    int SDL_RenderDrawRectF(SDL_Renderer*, const(SDL_FRect)*) @nogc nothrow;
    int SDL_RenderDrawRectsF(SDL_Renderer*, const(SDL_FRect)*, int) @nogc nothrow;
    int SDL_RenderFillRectF(SDL_Renderer*, const(SDL_FRect)*) @nogc nothrow;
    int SDL_RenderFillRectsF(SDL_Renderer*, const(SDL_FRect)*, int) @nogc nothrow;
    int SDL_RenderCopyF(SDL_Renderer*, SDL_Texture*, const(SDL_Rect)*, const(SDL_FRect)*) @nogc nothrow;
    int SDL_RenderCopyExF(SDL_Renderer*, SDL_Texture*, const(SDL_Rect)*, const(SDL_FRect)*, const(double), const(SDL_FPoint)*, const(SDL_RendererFlip)) @nogc nothrow;
    int SDL_RenderReadPixels(SDL_Renderer*, const(SDL_Rect)*, uint, void*, int) @nogc nothrow;
    void SDL_RenderPresent(SDL_Renderer*) @nogc nothrow;
    void SDL_DestroyTexture(SDL_Texture*) @nogc nothrow;
    void SDL_DestroyRenderer(SDL_Renderer*) @nogc nothrow;
    int SDL_RenderFlush(SDL_Renderer*) @nogc nothrow;
    int SDL_GL_BindTexture(SDL_Texture*, float*, float*) @nogc nothrow;
    int SDL_GL_UnbindTexture(SDL_Texture*) @nogc nothrow;
    void* SDL_RenderGetMetalLayer(SDL_Renderer*) @nogc nothrow;
    void* SDL_RenderGetMetalCommandEncoder(SDL_Renderer*) @nogc nothrow;

   
    SDL_RWops* SDL_RWFromFile(const(char)*, const(char)*) @nogc nothrow;
    // SDL_RWops* SDL_RWFromFP(_IO_FILE*, SDL_bool) @nogc nothrow;
    SDL_RWops* SDL_RWFromMem(void*, int) @nogc nothrow;
    SDL_RWops* SDL_RWFromConstMem(const(void)*, int) @nogc nothrow;
    SDL_RWops* SDL_AllocRW() @nogc nothrow;
    void SDL_FreeRW(SDL_RWops*) @nogc nothrow;
    static uint _lzcnt_u32(uint) @nogc nothrow;
    static uint __lzcnt32(uint) @nogc nothrow;
    c_long SDL_RWsize(SDL_RWops*) @nogc nothrow;
    c_long SDL_RWseek(SDL_RWops*, c_long, int) @nogc nothrow;
    c_long SDL_RWtell(SDL_RWops*) @nogc nothrow;
    c_ulong SDL_RWread(SDL_RWops*, void*, c_ulong, c_ulong) @nogc nothrow;
    c_ulong SDL_RWwrite(SDL_RWops*, const(void)*, c_ulong, c_ulong) @nogc nothrow;
    int SDL_RWclose(SDL_RWops*) @nogc nothrow;
    void* SDL_LoadFile_RW(SDL_RWops*, c_ulong*, int) @nogc nothrow;
    void* SDL_LoadFile(const(char)*, c_ulong*) @nogc nothrow;
    ubyte SDL_ReadU8(SDL_RWops*) @nogc nothrow;
    ushort SDL_ReadLE16(SDL_RWops*) @nogc nothrow;
    ushort SDL_ReadBE16(SDL_RWops*) @nogc nothrow;
    uint SDL_ReadLE32(SDL_RWops*) @nogc nothrow;
    uint SDL_ReadBE32(SDL_RWops*) @nogc nothrow;
    c_ulong SDL_ReadLE64(SDL_RWops*) @nogc nothrow;
    c_ulong SDL_ReadBE64(SDL_RWops*) @nogc nothrow;
    c_ulong SDL_WriteU8(SDL_RWops*, ubyte) @nogc nothrow;
    c_ulong SDL_WriteLE16(SDL_RWops*, ushort) @nogc nothrow;
    c_ulong SDL_WriteBE16(SDL_RWops*, ushort) @nogc nothrow;
    c_ulong SDL_WriteLE32(SDL_RWops*, uint) @nogc nothrow;
    c_ulong SDL_WriteBE32(SDL_RWops*, uint) @nogc nothrow;
    c_ulong SDL_WriteLE64(SDL_RWops*, c_ulong) @nogc nothrow;
    c_ulong SDL_WriteBE64(SDL_RWops*, c_ulong) @nogc nothrow;
   
    int SDL_NumSensors() @nogc nothrow;
    const(char)* SDL_SensorGetDeviceName(int) @nogc nothrow;
    SDL_SensorType SDL_SensorGetDeviceType(int) @nogc nothrow;
    int SDL_SensorGetDeviceNonPortableType(int) @nogc nothrow;
    int SDL_SensorGetDeviceInstanceID(int) @nogc nothrow;
    _SDL_Sensor* SDL_SensorOpen(int) @nogc nothrow;
    _SDL_Sensor* SDL_SensorFromInstanceID(int) @nogc nothrow;
    const(char)* SDL_SensorGetName(_SDL_Sensor*) @nogc nothrow;
    SDL_SensorType SDL_SensorGetType(_SDL_Sensor*) @nogc nothrow;
    int SDL_SensorGetNonPortableType(_SDL_Sensor*) @nogc nothrow;
    int SDL_SensorGetInstanceID(_SDL_Sensor*) @nogc nothrow;
    int SDL_SensorGetData(_SDL_Sensor*, float*, int) @nogc nothrow;
    void SDL_SensorClose(_SDL_Sensor*) @nogc nothrow;
    void SDL_SensorUpdate() @nogc nothrow;

    SDL_Window* SDL_CreateShapedWindow(const(char)*, uint, uint, uint, uint, uint) @nogc nothrow;
    SDL_bool SDL_IsShapedWindow(const(SDL_Window)*) @nogc nothrow;
    int SDL_SetWindowShape(SDL_Window*, SDL_Surface*, SDL_WindowShapeMode*) @nogc nothrow;
    int SDL_GetShapedWindowMode(SDL_Window*, SDL_WindowShapeMode*) @nogc nothrow;
    
    static void _storebe_i64(void*, long) @nogc nothrow;
    static long _loadbe_i64(const(void)*) @nogc nothrow;
    void* SDL_malloc(c_ulong) @nogc nothrow;
    void* SDL_calloc(c_ulong, c_ulong) @nogc nothrow;
    void* SDL_realloc(void*, c_ulong) @nogc nothrow;
    void SDL_free(void*) @nogc nothrow;
    alias SDL_malloc_func = void* function(c_ulong);
    alias SDL_calloc_func = void* function(c_ulong, c_ulong);
    alias SDL_realloc_func = void* function(void*, c_ulong);
    alias SDL_free_func = void function(void*);
    void SDL_GetMemoryFunctions(void* function(c_ulong)*, void* function(c_ulong, c_ulong)*, void* function(void*, c_ulong)*, void function(void*)*) @nogc nothrow;
    int SDL_SetMemoryFunctions(void* function(c_ulong), void* function(c_ulong, c_ulong), void* function(void*, c_ulong), void function(void*)) @nogc nothrow;
    int SDL_GetNumAllocations() @nogc nothrow;
    char* SDL_getenv(const(char)*) @nogc nothrow;
    int SDL_setenv(const(char)*, const(char)*, int) @nogc nothrow;
    void SDL_qsort(void*, c_ulong, c_ulong, int function(const(void)*, const(void)*)) @nogc nothrow;
    int SDL_abs(int) @nogc nothrow;
    static void _storebe_i32(void*, int) @nogc nothrow;
    int SDL_isdigit(int) @nogc nothrow;
    int SDL_isspace(int) @nogc nothrow;
    int SDL_toupper(int) @nogc nothrow;
    int SDL_tolower(int) @nogc nothrow;
    void* SDL_memset(void*, int, c_ulong) @nogc nothrow;
    static int _loadbe_i32(const(void)*) @nogc nothrow;
    static void _storebe_i16(void*, short) @nogc nothrow;
    static void SDL_memset4(void*, uint, c_ulong) @nogc nothrow;
    void* SDL_memcpy(void*, const(void)*, c_ulong) @nogc nothrow;
    void* SDL_memmove(void*, const(void)*, c_ulong) @nogc nothrow;
    int SDL_memcmp(const(void)*, const(void)*, c_ulong) @nogc nothrow;
    int* SDL_wcsdup(const(int)*) @nogc nothrow;
    c_ulong SDL_wcslen(const(int)*) @nogc nothrow;
    c_ulong SDL_wcslcpy(int*, const(int)*, c_ulong) @nogc nothrow;
    c_ulong SDL_wcslcat(int*, const(int)*, c_ulong) @nogc nothrow;
    int SDL_wcscmp(const(int)*, const(int)*) @nogc nothrow;
    c_ulong SDL_strlen(const(char)*) @nogc nothrow;
    c_ulong SDL_strlcpy(char*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong SDL_utf8strlcpy(char*, const(char)*, c_ulong) @nogc nothrow;
    c_ulong SDL_strlcat(char*, const(char)*, c_ulong) @nogc nothrow;
    char* SDL_strdup(const(char)*) @nogc nothrow;
    char* SDL_strrev(char*) @nogc nothrow;
    char* SDL_strupr(char*) @nogc nothrow;
    char* SDL_strlwr(char*) @nogc nothrow;
    char* SDL_strchr(const(char)*, int) @nogc nothrow;
    char* SDL_strrchr(const(char)*, int) @nogc nothrow;
    char* SDL_strstr(const(char)*, const(char)*) @nogc nothrow;
    c_ulong SDL_utf8strlen(const(char)*) @nogc nothrow;
    char* SDL_itoa(int, char*, int) @nogc nothrow;
    char* SDL_uitoa(uint, char*, int) @nogc nothrow;
    char* SDL_ltoa(c_long, char*, int) @nogc nothrow;
    char* SDL_ultoa(c_ulong, char*, int) @nogc nothrow;
    char* SDL_lltoa(c_long, char*, int) @nogc nothrow;
    char* SDL_ulltoa(c_ulong, char*, int) @nogc nothrow;
    int SDL_atoi(const(char)*) @nogc nothrow;
    double SDL_atof(const(char)*) @nogc nothrow;
    c_long SDL_strtol(const(char)*, char**, int) @nogc nothrow;
    c_ulong SDL_strtoul(const(char)*, char**, int) @nogc nothrow;
    c_long SDL_strtoll(const(char)*, char**, int) @nogc nothrow;
    c_ulong SDL_strtoull(const(char)*, char**, int) @nogc nothrow;
    double SDL_strtod(const(char)*, char**) @nogc nothrow;
    int SDL_strcmp(const(char)*, const(char)*) @nogc nothrow;
    int SDL_strncmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int SDL_strcasecmp(const(char)*, const(char)*) @nogc nothrow;
    int SDL_strncasecmp(const(char)*, const(char)*, c_ulong) @nogc nothrow;
    int SDL_sscanf(const(char)*, const(char)*, ...) @nogc nothrow;
    int SDL_vsscanf(const(char)*, const(char)*, va_list*) @nogc nothrow;
    int SDL_snprintf(char*, c_ulong, const(char)*, ...) @nogc nothrow;
    int SDL_vsnprintf(char*, c_ulong, const(char)*, va_list*) @nogc nothrow;
    double SDL_acos(double) @nogc nothrow;
    float SDL_acosf(float) @nogc nothrow;
    double SDL_asin(double) @nogc nothrow;
    float SDL_asinf(float) @nogc nothrow;
    double SDL_atan(double) @nogc nothrow;
    float SDL_atanf(float) @nogc nothrow;
    double SDL_atan2(double, double) @nogc nothrow;
    float SDL_atan2f(float, float) @nogc nothrow;
    double SDL_ceil(double) @nogc nothrow;
    float SDL_ceilf(float) @nogc nothrow;
    double SDL_copysign(double, double) @nogc nothrow;
    float SDL_copysignf(float, float) @nogc nothrow;
    double SDL_cos(double) @nogc nothrow;
    float SDL_cosf(float) @nogc nothrow;
    double SDL_exp(double) @nogc nothrow;
    float SDL_expf(float) @nogc nothrow;
    double SDL_fabs(double) @nogc nothrow;
    float SDL_fabsf(float) @nogc nothrow;
    double SDL_floor(double) @nogc nothrow;
    float SDL_floorf(float) @nogc nothrow;
    double SDL_fmod(double, double) @nogc nothrow;
    float SDL_fmodf(float, float) @nogc nothrow;
    double SDL_log(double) @nogc nothrow;
    float SDL_logf(float) @nogc nothrow;
    double SDL_log10(double) @nogc nothrow;
    float SDL_log10f(float) @nogc nothrow;
    double SDL_pow(double, double) @nogc nothrow;
    float SDL_powf(float, float) @nogc nothrow;
    double SDL_scalbn(double, int) @nogc nothrow;
    float SDL_scalbnf(float, int) @nogc nothrow;
    double SDL_sin(double) @nogc nothrow;
    float SDL_sinf(float) @nogc nothrow;
    double SDL_sqrt(double) @nogc nothrow;
    float SDL_sqrtf(float) @nogc nothrow;
    double SDL_tan(double) @nogc nothrow;
    float SDL_tanf(float) @nogc nothrow;
    static short _loadbe_i16(const(void)*) @nogc nothrow;
    static void _writegsbase_u64(ulong) @nogc nothrow;
    static void _writegsbase_u32(uint) @nogc nothrow;

    _SDL_iconv_t* SDL_iconv_open(const(char)*, const(char)*) @nogc nothrow;
    int SDL_iconv_close(_SDL_iconv_t*) @nogc nothrow;
    c_ulong SDL_iconv(_SDL_iconv_t*, const(char)**, c_ulong*, char**, c_ulong*) @nogc nothrow;
    char* SDL_iconv_string(const(char)*, const(char)*, const(char)*, c_ulong) @nogc nothrow;
    static void _writefsbase_u64(ulong) @nogc nothrow;
    static void _writefsbase_u32(uint) @nogc nothrow;
    static ulong _readgsbase_u64() @nogc nothrow;
    static void* SDL_memcpy4(void*, const(void)*, c_ulong) @nogc nothrow;
    static uint _readgsbase_u32() @nogc nothrow;
    static ulong _readfsbase_u64() @nogc nothrow;
    static uint _readfsbase_u32() @nogc nothrow;
    static int _rdrand64_step(ulong*) @nogc nothrow;
 
    SDL_Surface* SDL_CreateRGBSurface(uint, int, int, int, uint, uint, uint, uint) @nogc nothrow;
    SDL_Surface* SDL_CreateRGBSurfaceWithFormat(uint, int, int, int, uint) @nogc nothrow;
    SDL_Surface* SDL_CreateRGBSurfaceFrom(void*, int, int, int, int, uint, uint, uint, uint) @nogc nothrow;
    SDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom(void*, int, int, int, int, uint) @nogc nothrow;
    void SDL_FreeSurface(SDL_Surface*) @nogc nothrow;
    int SDL_SetSurfacePalette(SDL_Surface*, SDL_Palette*) @nogc nothrow;
    int SDL_LockSurface(SDL_Surface*) @nogc nothrow;
    void SDL_UnlockSurface(SDL_Surface*) @nogc nothrow;
    SDL_Surface* SDL_LoadBMP_RW(SDL_RWops*, int) @nogc nothrow;
    int SDL_SaveBMP_RW(SDL_Surface*, SDL_RWops*, int) @nogc nothrow;
    int SDL_SetSurfaceRLE(SDL_Surface*, int) @nogc nothrow;
    int SDL_SetColorKey(SDL_Surface*, int, uint) @nogc nothrow;
    SDL_bool SDL_HasColorKey(SDL_Surface*) @nogc nothrow;
    int SDL_GetColorKey(SDL_Surface*, uint*) @nogc nothrow;
    int SDL_SetSurfaceColorMod(SDL_Surface*, ubyte, ubyte, ubyte) @nogc nothrow;
    int SDL_GetSurfaceColorMod(SDL_Surface*, ubyte*, ubyte*, ubyte*) @nogc nothrow;
    int SDL_SetSurfaceAlphaMod(SDL_Surface*, ubyte) @nogc nothrow;
    int SDL_GetSurfaceAlphaMod(SDL_Surface*, ubyte*) @nogc nothrow;
    int SDL_SetSurfaceBlendMode(SDL_Surface*, SDL_BlendMode) @nogc nothrow;
    int SDL_GetSurfaceBlendMode(SDL_Surface*, SDL_BlendMode*) @nogc nothrow;
    SDL_bool SDL_SetClipRect(SDL_Surface*, const(SDL_Rect)*) @nogc nothrow;
    void SDL_GetClipRect(SDL_Surface*, SDL_Rect*) @nogc nothrow;
    SDL_Surface* SDL_DuplicateSurface(SDL_Surface*) @nogc nothrow;
    SDL_Surface* SDL_ConvertSurface(SDL_Surface*, const(SDL_PixelFormat)*, uint) @nogc nothrow;
    SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface*, uint, uint) @nogc nothrow;
    int SDL_ConvertPixels(int, int, uint, const(void)*, int, uint, void*, int) @nogc nothrow;
    int SDL_FillRect(SDL_Surface*, const(SDL_Rect)*, uint) @nogc nothrow;
    int SDL_FillRects(SDL_Surface*, const(SDL_Rect)*, int, uint) @nogc nothrow;
    int SDL_UpperBlit(SDL_Surface*, const(SDL_Rect)*, SDL_Surface*, SDL_Rect*) @nogc nothrow;
    int SDL_LowerBlit(SDL_Surface*, SDL_Rect*, SDL_Surface*, SDL_Rect*) @nogc nothrow;
    int SDL_SoftStretch(SDL_Surface*, const(SDL_Rect)*, SDL_Surface*, const(SDL_Rect)*) @nogc nothrow;
    int SDL_UpperBlitScaled(SDL_Surface*, const(SDL_Rect)*, SDL_Surface*, SDL_Rect*) @nogc nothrow;
    int SDL_LowerBlitScaled(SDL_Surface*, SDL_Rect*, SDL_Surface*, SDL_Rect*) @nogc nothrow;
    
    void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE) @nogc nothrow;
    SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode() @nogc nothrow;
    SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int, int) @nogc nothrow;
    int SDL_LinuxSetThreadPriority(c_long, int) @nogc nothrow;
    SDL_bool SDL_IsTablet() @nogc nothrow;
    
    SDL_Thread* SDL_CreateThread(int function(void*), const(char)*, void*) @nogc nothrow;
    SDL_Thread* SDL_CreateThreadWithStackSize(int function(void*), const(char)*, const(c_ulong), void*) @nogc nothrow;
    const(char)* SDL_GetThreadName(SDL_Thread*) @nogc nothrow;
    c_ulong SDL_ThreadID() @nogc nothrow;
    c_ulong SDL_GetThreadID(SDL_Thread*) @nogc nothrow;
    int SDL_SetThreadPriority(SDL_ThreadPriority) @nogc nothrow;
    void SDL_WaitThread(SDL_Thread*, int*) @nogc nothrow;
    void SDL_DetachThread(SDL_Thread*) @nogc nothrow;
    uint SDL_TLSCreate() @nogc nothrow;
    void* SDL_TLSGet(uint) @nogc nothrow;
    int SDL_TLSSet(uint, const(void)*, void function(void*)) @nogc nothrow;
    uint SDL_GetTicks() @nogc nothrow;
    c_ulong SDL_GetPerformanceCounter() @nogc nothrow;
    c_ulong SDL_GetPerformanceFrequency() @nogc nothrow;
    void SDL_Delay(uint) @nogc nothrow;
    alias SDL_TimerCallback = uint function(uint, void*);
    alias SDL_TimerID = int;
    int SDL_AddTimer(uint, uint function(uint, void*), void*) @nogc nothrow;
    SDL_bool SDL_RemoveTimer(int) @nogc nothrow;
    alias SDL_TouchID = c_long;
    alias SDL_FingerID = c_long;
    
    int SDL_GetNumTouchDevices() @nogc nothrow;
    c_long SDL_GetTouchDevice(int) @nogc nothrow;
    SDL_TouchDeviceType SDL_GetTouchDeviceType(c_long) @nogc nothrow;
    int SDL_GetNumTouchFingers(c_long) @nogc nothrow;
    SDL_Finger* SDL_GetTouchFinger(c_long, int) @nogc nothrow;

    void SDL_GetVersion(SDL_version*) @nogc nothrow;
    const(char)* SDL_GetRevision() @nogc nothrow;
    int SDL_GetRevisionNumber() @nogc nothrow;
    
    int SDL_GetNumVideoDrivers() @nogc nothrow;
    const(char)* SDL_GetVideoDriver(int) @nogc nothrow;
    int SDL_VideoInit(const(char)*) @nogc nothrow;
    void SDL_VideoQuit() @nogc nothrow;
    const(char)* SDL_GetCurrentVideoDriver() @nogc nothrow;
    int SDL_GetNumVideoDisplays() @nogc nothrow;
    const(char)* SDL_GetDisplayName(int) @nogc nothrow;
    int SDL_GetDisplayBounds(int, SDL_Rect*) @nogc nothrow;
    int SDL_GetDisplayUsableBounds(int, SDL_Rect*) @nogc nothrow;
    int SDL_GetDisplayDPI(int, float*, float*, float*) @nogc nothrow;
    SDL_DisplayOrientation SDL_GetDisplayOrientation(int) @nogc nothrow;
    int SDL_GetNumDisplayModes(int) @nogc nothrow;
    int SDL_GetDisplayMode(int, int, SDL_DisplayMode*) @nogc nothrow;
    int SDL_GetDesktopDisplayMode(int, SDL_DisplayMode*) @nogc nothrow;
    int SDL_GetCurrentDisplayMode(int, SDL_DisplayMode*) @nogc nothrow;
    SDL_DisplayMode* SDL_GetClosestDisplayMode(int, const(SDL_DisplayMode)*, SDL_DisplayMode*) @nogc nothrow;
    int SDL_GetWindowDisplayIndex(SDL_Window*) @nogc nothrow;
    int SDL_SetWindowDisplayMode(SDL_Window*, const(SDL_DisplayMode)*) @nogc nothrow;
    int SDL_GetWindowDisplayMode(SDL_Window*, SDL_DisplayMode*) @nogc nothrow;
    uint SDL_GetWindowPixelFormat(SDL_Window*) @nogc nothrow;
    SDL_Window* SDL_CreateWindow(const(char)*, int, int, int, int, uint) @nogc nothrow;
    SDL_Window* SDL_CreateWindowFrom(const(void)*) @nogc nothrow;
    uint SDL_GetWindowID(SDL_Window*) @nogc nothrow;
    SDL_Window* SDL_GetWindowFromID(uint) @nogc nothrow;
    uint SDL_GetWindowFlags(SDL_Window*) @nogc nothrow;
    void SDL_SetWindowTitle(SDL_Window*, const(char)*) @nogc nothrow;
    const(char)* SDL_GetWindowTitle(SDL_Window*) @nogc nothrow;
    void SDL_SetWindowIcon(SDL_Window*, SDL_Surface*) @nogc nothrow;
    void* SDL_SetWindowData(SDL_Window*, const(char)*, void*) @nogc nothrow;
    void* SDL_GetWindowData(SDL_Window*, const(char)*) @nogc nothrow;
    void SDL_SetWindowPosition(SDL_Window*, int, int) @nogc nothrow;
    void SDL_GetWindowPosition(SDL_Window*, int*, int*) @nogc nothrow;
    void SDL_SetWindowSize(SDL_Window*, int, int) @nogc nothrow;
    void SDL_GetWindowSize(SDL_Window*, int*, int*) @nogc nothrow;
    int SDL_GetWindowBordersSize(SDL_Window*, int*, int*, int*, int*) @nogc nothrow;
    void SDL_SetWindowMinimumSize(SDL_Window*, int, int) @nogc nothrow;
    void SDL_GetWindowMinimumSize(SDL_Window*, int*, int*) @nogc nothrow;
    void SDL_SetWindowMaximumSize(SDL_Window*, int, int) @nogc nothrow;
    void SDL_GetWindowMaximumSize(SDL_Window*, int*, int*) @nogc nothrow;
    void SDL_SetWindowBordered(SDL_Window*, SDL_bool) @nogc nothrow;
    void SDL_SetWindowResizable(SDL_Window*, SDL_bool) @nogc nothrow;
    void SDL_ShowWindow(SDL_Window*) @nogc nothrow;
    void SDL_HideWindow(SDL_Window*) @nogc nothrow;
    void SDL_RaiseWindow(SDL_Window*) @nogc nothrow;
    void SDL_MaximizeWindow(SDL_Window*) @nogc nothrow;
    void SDL_MinimizeWindow(SDL_Window*) @nogc nothrow;
    void SDL_RestoreWindow(SDL_Window*) @nogc nothrow;
    int SDL_SetWindowFullscreen(SDL_Window*, uint) @nogc nothrow;
    SDL_Surface* SDL_GetWindowSurface(SDL_Window*) @nogc nothrow;
    int SDL_UpdateWindowSurface(SDL_Window*) @nogc nothrow;
    int SDL_UpdateWindowSurfaceRects(SDL_Window*, const(SDL_Rect)*, int) @nogc nothrow;
    void SDL_SetWindowGrab(SDL_Window*, SDL_bool) @nogc nothrow;
    SDL_bool SDL_GetWindowGrab(SDL_Window*) @nogc nothrow;
    SDL_Window* SDL_GetGrabbedWindow() @nogc nothrow;
    int SDL_SetWindowBrightness(SDL_Window*, float) @nogc nothrow;
    float SDL_GetWindowBrightness(SDL_Window*) @nogc nothrow;
    int SDL_SetWindowOpacity(SDL_Window*, float) @nogc nothrow;
    int SDL_GetWindowOpacity(SDL_Window*, float*) @nogc nothrow;
    int SDL_SetWindowModalFor(SDL_Window*, SDL_Window*) @nogc nothrow;
    int SDL_SetWindowInputFocus(SDL_Window*) @nogc nothrow;
    int SDL_SetWindowGammaRamp(SDL_Window*, const(ushort)*, const(ushort)*, const(ushort)*) @nogc nothrow;
    int SDL_GetWindowGammaRamp(SDL_Window*, ushort*, ushort*, ushort*) @nogc nothrow;
    int SDL_SetWindowHitTest(SDL_Window*, SDL_HitTestResult function(SDL_Window*, const(SDL_Point)*, void*), void*) @nogc nothrow;
    void SDL_DestroyWindow(SDL_Window*) @nogc nothrow;
    
    SDL_bool SDL_IsScreenSaverEnabled() @nogc nothrow;
    void SDL_EnableScreenSaver() @nogc nothrow;
    void SDL_DisableScreenSaver() @nogc nothrow;
    int SDL_GL_LoadLibrary(const(char)*) @nogc nothrow;
    void* SDL_GL_GetProcAddress(const(char)*) @nogc nothrow;
    void SDL_GL_UnloadLibrary() @nogc nothrow;
    SDL_bool SDL_GL_ExtensionSupported(const(char)*) @nogc nothrow;
    void SDL_GL_ResetAttributes() @nogc nothrow;
    int SDL_GL_SetAttribute(SDL_GLattr, int) @nogc nothrow;
    int SDL_GL_GetAttribute(SDL_GLattr, int*) @nogc nothrow;
    void* SDL_GL_CreateContext(SDL_Window*) @nogc nothrow;
    int SDL_GL_MakeCurrent(SDL_Window*, void*) @nogc nothrow;
    SDL_Window* SDL_GL_GetCurrentWindow() @nogc nothrow;
    void* SDL_GL_GetCurrentContext() @nogc nothrow;
    void SDL_GL_GetDrawableSize(SDL_Window*, int*, int*) @nogc nothrow;
    int SDL_GL_SetSwapInterval(int) @nogc nothrow;
    int SDL_GL_GetSwapInterval() @nogc nothrow;
    void SDL_GL_SwapWindow(SDL_Window*) @nogc nothrow;
    void SDL_GL_DeleteContext(void*) @nogc nothrow;

    const(SDL_version)* TTF_Linked_Version() @nogc nothrow;
    void TTF_ByteSwappedUNICODE(int) @nogc nothrow;

    int TTF_Init() @nogc nothrow;
    _TTF_Font* TTF_OpenFont(const(char)*, int) @nogc nothrow;
    _TTF_Font* TTF_OpenFontIndex(const(char)*, int, c_long) @nogc nothrow;
    _TTF_Font* TTF_OpenFontRW(SDL_RWops*, int, int) @nogc nothrow;
    _TTF_Font* TTF_OpenFontIndexRW(SDL_RWops*, int, int, c_long) @nogc nothrow;
    int TTF_GetFontStyle(const(_TTF_Font)*) @nogc nothrow;
    void TTF_SetFontStyle(_TTF_Font*, int) @nogc nothrow;
    int TTF_GetFontOutline(const(_TTF_Font)*) @nogc nothrow;
    void TTF_SetFontOutline(_TTF_Font*, int) @nogc nothrow;
    int TTF_GetFontHinting(const(_TTF_Font)*) @nogc nothrow;
    void TTF_SetFontHinting(_TTF_Font*, int) @nogc nothrow;
    int TTF_FontHeight(const(_TTF_Font)*) @nogc nothrow;
    int TTF_FontAscent(const(_TTF_Font)*) @nogc nothrow;
    int TTF_FontDescent(const(_TTF_Font)*) @nogc nothrow;
    int TTF_FontLineSkip(const(_TTF_Font)*) @nogc nothrow;
    int TTF_GetFontKerning(const(_TTF_Font)*) @nogc nothrow;
    void TTF_SetFontKerning(_TTF_Font*, int) @nogc nothrow;
    c_long TTF_FontFaces(const(_TTF_Font)*) @nogc nothrow;
    int TTF_FontFaceIsFixedWidth(const(_TTF_Font)*) @nogc nothrow;
    char* TTF_FontFaceFamilyName(const(_TTF_Font)*) @nogc nothrow;
    char* TTF_FontFaceStyleName(const(_TTF_Font)*) @nogc nothrow;
    int TTF_GlyphIsProvided(const(_TTF_Font)*, ushort) @nogc nothrow;
    int TTF_GlyphMetrics(_TTF_Font*, ushort, int*, int*, int*, int*, int*) @nogc nothrow;
    int TTF_SizeText(_TTF_Font*, const(char)*, int*, int*) @nogc nothrow;
    int TTF_SizeUTF8(_TTF_Font*, const(char)*, int*, int*) @nogc nothrow;
    int TTF_SizeUNICODE(_TTF_Font*, const(ushort)*, int*, int*) @nogc nothrow;
    SDL_Surface* TTF_RenderText_Solid(_TTF_Font*, const(char)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUTF8_Solid(_TTF_Font*, const(char)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUNICODE_Solid(_TTF_Font*, const(ushort)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderGlyph_Solid(_TTF_Font*, ushort, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderText_Shaded(_TTF_Font*, const(char)*, SDL_Color, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUTF8_Shaded(_TTF_Font*, const(char)*, SDL_Color, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUNICODE_Shaded(_TTF_Font*, const(ushort)*, SDL_Color, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderGlyph_Shaded(_TTF_Font*, ushort, SDL_Color, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderText_Blended(_TTF_Font*, const(char)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUTF8_Blended(_TTF_Font*, const(char)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderUNICODE_Blended(_TTF_Font*, const(ushort)*, SDL_Color) @nogc nothrow;
    SDL_Surface* TTF_RenderText_Blended_Wrapped(_TTF_Font*, const(char)*, SDL_Color, uint) @nogc nothrow;
    SDL_Surface* TTF_RenderUTF8_Blended_Wrapped(_TTF_Font*, const(char)*, SDL_Color, uint) @nogc nothrow;
    SDL_Surface* TTF_RenderUNICODE_Blended_Wrapped(_TTF_Font*, const(ushort)*, SDL_Color, uint) @nogc nothrow;
    SDL_Surface* TTF_RenderGlyph_Blended(_TTF_Font*, ushort, SDL_Color) @nogc nothrow;
    void TTF_CloseFont(_TTF_Font*) @nogc nothrow;
    void TTF_Quit() @nogc nothrow;
    int TTF_WasInit() @nogc nothrow;
    int TTF_GetFontKerningSize(_TTF_Font*, int, int) @nogc nothrow;
    int TTF_GetFontKerningSizeGlyphs(_TTF_Font*, ushort, ushort) @nogc nothrow;
}



